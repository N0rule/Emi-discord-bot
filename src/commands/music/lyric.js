const { EmbedBuilder, ApplicationCommandOptionType } = require("discord.js");
const { getJson } = require("@helpers/HttpUtils");
const { MESSAGES, EMBED_COLORS } = require("@root/config");

const BASE_URL = "https://some-random-api.ml/lyrics";

/**
 * @type {import("@structures/Command")}
 */
module.exports = {
  name: "lyric",
  description: "–Ω–∞–π–¥–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏",
  category: "MUSIC",
  botPermissions: ["EmbedLinks"],
  cooldown: 10,
  command: {
    enabled: true,
    minArgsCount: 1,
    usage: "<–ò–º—è –ü–µ—Å–Ω–∏ - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å>",
  },
  slashCommand: {
    enabled: true,
    options: [
      {
        name: "query",
        type: ApplicationCommandOptionType.String,
        description: "–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏",
        required: true,
      },
    ],
  },

  async messageRun(message, args) {
    const choice = args.join(" ");
    if (!choice) {
      return message.safeReply("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç.");
    }
    const response = await getLyric(message.author, choice);
    return message.safeReply(response);
  },

  async interactionRun(interaction) {
    const choice = interaction.options.getString("query");
    const response = await getLyric(interaction.user, choice);
    await interaction.followUp(response);
  },
};

async function getLyric(user, choice) {
  const lyric = await getJson(`${BASE_URL}?title=${choice}`);
  if (!lyric.success) {
    const embed = new EmbedBuilder()
      .setColor(EMBED_COLORS.ERROR)
      .setDescription("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —ç—Ç–æ–π –ø–µ—Å–Ω–∏.");
    return { embeds: [embed] };
  }

  const thumbnail = lyric.data?.thumbnail.genius;
  const author = lyric.data?.author;
  const lyrics = lyric.data?.lyrics;
  const title = lyric.data?.title;

  const embed = new EmbedBuilder();
  embed
    .setColor(EMBED_COLORS.BOT_EMBED)
    .setTitle(`${author} - ${title}`)
    .setThumbnail(thumbnail)
    .setDescription(lyrics)
    .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.tag}` });

  return { embeds: [embed] };
}
